### Fizz Buzz

Print an array containing the numbers from 1 to 100 where

* the value is a multiple of 3: use the value 'Fizz' instead
* the value is a multiple of 5: use the value 'Buzz' instead
* the value is a multiple of 3 & 5: use the value 'FizzBuzz' instead

> The first 10 numbers should look like *1 2 Fizz 4 Buzz Fizz FizzBuzz 8 Fizz Buzz*

-----

### Password Verifier

Create a password verifications class called “PasswordVerifier”.

Add the following verifications to a master function called `verify()``

* password should be larger than 8 chars
* password should not be null
* password should have one uppercase letter at least
* password should have one lowercase letter at least
* password should have one number at least

-----

### Leap Year

Write a function that returns true or false depending on
whether its input integer is a leap year or not.

A leap year is defined as one that is divisible by 4,
but is not otherwise divisible by 100 unless it is also divisble by 400.

> For example, 2001 is a typical common year and 1996
> is a typical leap year, whereas 1900 is an atypical
> common year and 2000 is an atypical leap year.

-----

### LCD Digits

Your task is to create an LCD string representation of an
integer value using a 3x3 grid of space, underscore, and
pipe characters for each digit. Each digit is shown below
(using a dot instead of a space)

```
._.   ...   ._.   ._.   ...   ._.   ._.   ._.   ._.   ._.
|.|   ..|   ._|   ._|   |_|   |_.   |_.   ..|   |_|   |_|
|_|   ..|   |_.   ._|   ..|   ._|   |_|   ..|   |_|   ..|
```

> Example: 910
```
._. ... ._.
|_| ..| |.|
..| ..| |_|
```

-----

### Harry Potter

To try and encourage more sales of the 5 different Harry
Potter books they sell, a bookshop has decided to offer
discounts of multiple-book purchases.

One copy of any of the five books costs 8 EUR.

If, however, you buy two different books, you get a 5%
discount on those two books.

If you buy 3 different books, you get a 10% discount.

If you buy 4 different books, you get a 20% discount.

If you go the whole hog, and buy all 5, you get a huge 25%
discount.

Note that if you buy, say, four books, of which 3 are
different titles, you get a 10% discount on the 3 that
form part of a set, but the fourth book still costs 8 EUR.

Your mission is to write a piece of code to calculate the
price of any conceivable shopping basket (containing only
Harry Potter books), giving as big a discount as possible.

> For example, how much does this basket of books cost?

> 2 copies of the first book
> 2 copies of the second book
> 2 copies of the third book
> 1 copy of the fourth book
> 1 copy of the fifth book
>
> *Answer: 51.60 EUR*

-----

### Calc Stats

Your task is to process a sequence of integer numbers
to determine the following statistics:

    - minimum value
    - maximum value
    - number of elements in the sequence
    - average value

> For example: [6, 9, 15, -2, 92, 11]
>
>    - minimum value = -2
>    - maximum value = 92
>    - number of elements in the sequence = 6
>    - average value = 18.166666

-----

### String Calculator Kata

* Create a simple String calculator with a method int Add(string numbers). The method can take 0, 1 or 2 numbers, and will return their sum (for an empty string it will return 0). For example "" or "1" or "1,2"
* Start with the simplest test case of an empty string and move to 1 and two numbers
* Remember to solve things as simply as possible so that you force yourself to write tests you did  not think about
* Remember to refactor after each passing test
* Allow the Add method to handle an unknown amount of numbers
* Allow the Add method to handle new lines between numbers (instead of commas).
* the following input is ok:  "1\n2,3"  (will equal 6)
* the following input is NOT ok:  "1,\n" (not need to prove it - just clarifying)
* Support different delimiters. To change a delimiter, the beginning of the string will contain a separate line that looks like this: `[delimiter]\n[numbers...]`, for example `;\n1;2` should return three where the default delimiter is `;` .
* he first line is optional. all existing scenarios should still be supported
* Calling Add with a negative number will throw an exception "negatives not allowed" - and the negative that was passed.
* if there are multiple negatives, show all of them in the exception message

-----

### Game of Life

Your task is to write a program to calculate the next
generation of Conway's game of life, given any starting
position. You start with a two dimensional grid of cells,
where each cell is either alive or dead. The grid is finite,
and no life can exist off the edges. When calculating the
next generation of the grid, follow these four rules:

1. Any live cell with fewer than two live neighbours dies,
   as if caused by underpopulation.
2. Any live cell with more than three live neighbours dies,
   as if by overcrowding.
3. Any live cell with two or three live neighbours lives
   on to the next generation.
4. Any dead cell with exactly three live neighbours becomes
   a live cell.

Examples: * indicates live cell, . indicates dead cell

Example input: (4 x 8 grid)

```
4 8
........
....*...
...**...
........
```

Example output:
```
4 8
........
...**...
...**...
........
```